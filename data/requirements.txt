pandas==2.2.3
numpy==2.2.5
matplotlib==3.9.2
scikit-optimize==0.10.2
sklearn-preprocessing==0.1.0
keras==3.8.0
tensorflow==2.18.0
# tensorflow[and-cuda] for cuda support (not supported on windows)
Keras-Preprocessing==1.1.2

config==0.5.1
matplotlib==3.10.1
Requests==2.32.3
scikit_learn==1.6.1
selenium==4.31.0
SQLAlchemy==2.0.40
urllib3==2.4.0


# model downloads for these hyperparameters:  https://drive.google.com/drive/folders/1M-IWseAn_hjiwQUDIvP4SV1f6R5w-n6T?usp=sharing
# Define parameters for long model
# long_seq = 8
# long_future_steps = 128
# long_feature_shape = short_data.shape[1] + extra_long_data

# Define parameters for short model
# short_seq = 16
# short_future_steps = 16
# short_feature_shape = short_data.shape[1]

# long_garage_models = []
# short_garage_models = []

# remember the models will not load correctly if you changes this and don't re-train
# for garage_no, garage in enumerate(garage_names,start=0):
# long model hyperparameters 
#    long_garage_models.append(build_model(
#    lstm_neurons_list=[192,32,192],
#    dropout=0.1,
#    learning_rate=2e-5,
#    seq_size=long_seq,
#    activation='linear',
#    n_feature=long_feature_shape,
#    future_steps=long_future_steps,
#    garage_no=garage_no))

# short model hyperparameters 
#    short_garage_models.append(build_model(
#    lstm_neurons_list=[64,16,64],
#    dropout=0.1,
#    learning_rate=1e-4,
#    seq_size=short_seq,
#    activation='celu',
#    n_feature=short_feature_shape,
#    future_steps=short_future_steps,
#    garage_no=garage_no))

